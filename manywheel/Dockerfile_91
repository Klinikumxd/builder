FROM nvidia/cuda:9.0-devel-centos6

# MKL
RUN mkdir -p /opt/intel/lib
COPY mkl_libs/libmkl_core.a /opt/intel/lib/libmkl_core.a
COPY mkl_libs/libmkl_gnu_thread.a /opt/intel/lib/libmkl_gnu_thread.a
COPY mkl_libs/libmkl_intel_lp64.a /opt/intel/lib/libmkl_intel_lp64.a

RUN yum install -y git wget curl util-linux xz perl


ENV LC_ALL en_US.UTF-8
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US.UTF-8

# get devtoolset-3
RUN yum install -y yum-utils
RUN yum install -y centos-release-scl
RUN yum-config-manager --enable rhel-server-rhscl-7-rpms
RUN wget http://people.centos.org/tru/devtools-3/devtools-3.repo -O /etc/yum.repos.d/devtools-3.repo
RUN yum install -y devtoolset-3-gcc
RUN yum install -y devtoolset-3-gcc-c++
RUN yum install -y devtoolset-3-gcc-gfortran
RUN yum install -y devtoolset-3-binutils
ENV PATH=/opt/rh/devtoolset-3/root/usr/bin:$PATH
ENV LD_LIBRARY_PATH=/opt/rh/devtoolset-3/root/usr/lib64:/opt/rh/devtoolset-3/root/usr/lib:$LD_LIBRARY_PATH

# cmake
RUN yum install -y cmake

# build python
COPY build_scripts /build_scripts
RUN bash build_scripts/build.sh && rm -r build_scripts

ENV SSL_CERT_FILE=/opt/_internal/certs.pem

# remove unncessary python versions
RUN rm -rf /opt/python/cp26-cp26m /opt/_internal/cpython-2.6.9-ucs2
RUN rm -rf /opt/python/cp26-cp26mu /opt/_internal/cpython-2.6.9-ucs4
RUN rm -rf /opt/python/cp33-cp33m /opt/_internal/cpython-3.3.6
RUN rm -rf /opt/python/cp34-cp34m /opt/_internal/cpython-3.4.6

# install CUDA 9.1 in the same container
RUN wget https://developer.nvidia.com/compute/cuda/9.1/Prod/local_installers/cuda_9.1.85_387.26_linux && \
    chmod +x cuda_9.1.85_387.26_linux && \
    ./cuda_9.1.85_387.26_linux --silent --no-opengl-libs --toolkit && \
    rm -f cuda_9.1.85_387.26_linux

# install CUDA 9.1 CuDNN
# cuDNN license: https://developer.nvidia.com/cudnn/license_agreement
RUN curl -fsSL http://developer.download.nvidia.com/compute/redist/cudnn/v7.0.5/cudnn-9.1-linux-x64-v7.tgz -O && \
    tar --no-same-owner -xzf cudnn-9.1-linux-x64-v7.tgz -C /usr/local && \
    rm cudnn-9.1-linux-x64-v7.tgz && \
    ldconfig

# NCCL2
RUN wget https://s3.amazonaws.com/pytorch/nccl_2.1.4-1%2Bcuda9.1_x86_64.txz && \
    tar --no-same-owner -xvf nccl_2.1.4-1+cuda9.1_x86_64.txz && \
    mv nccl_2.1.4-1+cuda9.1_x86_64/include/* /usr/local/cuda/include/ && \
    cp -P nccl_2.1.4-1+cuda9.1_x86_64/lib/libnccl* /usr/local/cuda/lib64/ && \
    rm -rf nccl_2.1.4-1+cuda9.1_x86_64* && \
    ldconfig

# magma
RUN wget http://icl.cs.utk.edu/projectsfiles/magma/downloads/magma-2.2.0.tar.gz && \
    tar -xvf magma-2.2.0.tar.gz && \
    cd magma-2.2.0 && \
    wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda91-2.2.0/cmakelists.patch && \
    wget https://raw.githubusercontent.com/pytorch/builder/master/conda/magma-cuda91-2.2.0/thread_queue.patch && \
    patch <cmakelists.patch && \
    patch -p1 <thread_queue.patch && \
    mkdir build && \
    cd build && \
    cmake .. -DUSE_FORTRAN=OFF -DGPU_TARGET="All" -DCMAKE_INSTALL_PREFIX=$PREFIX && \
    make -j$(getconf _NPROCESSORS_CONF) && \
    make install && \
    cd ..
